# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /d/googletest/googletest

# Where to find user code.
USER_DIR = ..
USER_INCLUDE = $(USER_DIR)/include
USER_SRC = $(USER_DIR)/src
USER_APP = $(USER_SRC)/app
USER_TEST = $(USER_SRC)/test
USER_UNITTEST = $(USER_TEST)/unit

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
# CXXFLAGS += -g -Wall -Wextra -pthread
CXXFLAGS += -g -Wall -Wextra

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = bowling_game_unittest

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds bowling_game_unittest.
# Link with gtest_main.a in place of defining our own main() function.

bowling_game.o : $(USER_APP)/bowling_game.cc $(USER_INCLUDE)/bowling_game.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS)  -I$(USER_DIR)/include -c $(USER_APP)/bowling_game.cc

bowling_game_unittest.o : $(USER_UNITTEST)/bowling_game_unittest.cc \
                     $(USER_INCLUDE)/bowling_game.h $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS)  -I$(USER_DIR)/include -c $(USER_UNITTEST)/bowling_game_unittest.cc

bowling_game_unittest : bowling_game.o bowling_game_unittest.o gtest_main.a
#	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@
